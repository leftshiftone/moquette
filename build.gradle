allprojects {
  apply plugin: 'maven'
  apply plugin: 'maven-publish'

  group = 'one.leftshift.moquette'
  version = '0.14.0-SNAPSHOT'
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
    classpath 'gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
  }
}

subprojects {

  repositories {
    mavenLocal()

    maven { url "https://repo.eclipse.org/content/repositories/paho-releases/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://repo.maven.apache.org/maven2" }
  }

  apply from: new File(rootDir, 'gradle/java.gradle')
  apply from: new File(rootDir, 'gradle/test.gradle')
  apply from: new File(rootDir, 'gradle/lint.gradle')
  apply plugin: 'com.jfrog.bintray'
  apply plugin: 'eclipse'

  ext {
    nettyVersion = '4.1.22.Final'
  }

  task packageTests(type: Jar) {
    from sourceSets.test.output
    from sourceSets.test.allSource
    from sourceSets.test.resources
    classifier = 'tests'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // summarize artifacts
  artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    archives packageTests
  }

  dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'

    testCompile group: 'junit', name: 'junit', version: '4.8.2'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '2.6.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.0'
    testCompile group: 'org.awaitility', name: 'awaitility', version: '3.0.0'
  }

  test {
    systemProperties.put "moquette.path", "build/resources/test/"
    systemProperties.put "io.netty.leakDetectionLevel", "paranoid"
    testLogging {
      exceptionFormat 'full'
      events "passed", "skipped", "failed"
    }
  }

  // Deploy set environment variables and run ./gradlew bintrayUpload
  // publication to maven repo
  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = project.name
        from components.java
        artifact sourceJar
        artifact javadocJar
        pom.withXml {
          Node root = asNode()
          root.appendNode("name", "Moquette Broker")
          root.appendNode("description", "Moquette MQTT Broker")
          root.appendNode("url", "https://github.com/leftshiftone/moquette")

          Node licenses = root.appendNode("licenses")
          Node license = licenses.appendNode("license")
          license.appendNode("name", "The Apache License, Version 2.0")
          license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

          Node developers = root.appendNode("developers")
          Node developer = developers.appendNode("developer")
          developer.appendNode("id", "leftshiftone")
          developer.appendNode("name", "Leftshift One")
          developer.appendNode("email", "contact@leftshift.one")
          developer.appendNode("organization", "Leftshift One Software GmbH")
          developer.appendNode("organizationUrl", "https://www.leftshift.one")

          Node scm = root.appendNode("scm")
          scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/moquette.git")
          scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/moquette.git")
          scm.appendNode("url", "https://github.com/leftshiftone/moquette")
        }
      }
    }
  }

  bintray {
    logger.info "Bintray deploy with user [${System.getenv('BINTRAY_USER')}] while working on ${project.name}"
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
      repo = 'moquette'
      name = "${project.group}.${project.name}"
      userOrg = "leftshiftone"
      licenses = ["Apache-2.0"]
      vcsUrl = "https://github.com/leftshiftone/moquette.git"
      publications = ['mavenJava']
      version {
        gpg {
          sign = true
        }
        mavenCentralSync {
          sync = true
          user = System.getenv('OSSRH_USER')
          password = System.getenv('OSSRH_PASSWORD')
        }
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.6'
}
